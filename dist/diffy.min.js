(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["diffy"] = factory();
	else
		root["diffy"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.create = undefined;
	
	var _Diffy = __webpack_require__(2);
	
	var _Diffy2 = _interopRequireDefault(_Diffy);
	
	var _raf = __webpack_require__(3);
	
	var _raf2 = _interopRequireDefault(_raf);
	
	var _capture = __webpack_require__(4);
	
	var _capture2 = _interopRequireDefault(_capture);
	
	var _utils = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* eslint-disable no-console */
	
	var create = exports.create = function create(_ref) {
	  var _ref$resolution = _ref.resolution,
	      resolution = _ref$resolution === undefined ? { x: 10, y: 5 } : _ref$resolution;
	
	  console.log('Create called');
	  return _Diffy2.default.create({
	    tickFn: _raf2.default,
	    captureFn: _capture2.default,
	    debug: true,
	    resolution: resolution
	  });
	};
	
	// /**/
	// const $debug = $('#diffy-debug');
	
	// /**/
	// const $toggle = $('#diffy-toggle');
	
	// /**/
	// const $video = $('#diffy-video');
	
	// /**/
	// const $rawCanvas = $('#diffy-raw-canvas');
	
	// /* */
	// const rawCtx = $rawCanvas.getContext('2d');
	
	// /* */
	// const rawWidth = $rawCanvas.width;
	
	// /* */
	// const rawHeight = $rawHeight.height;
	
	// /* */
	// const $blendCanvas = $('#diffy-blend-canvas');
	
	// /* */
	// const blendCtx = $blendCanvas.getContext('2d');
	
	// /* */
	// const blendWidth = $blendCanvas.width;
	
	// /* */
	// const blendHeight = $blendCanvas.height;
	
	// /* */
	// const blendImageData = blendCtx.getImageData(0, 0, blendWidth, blendHeight);

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Diffy = function () {
	  function Diffy(_ref) {
	    var tickFn = _ref.tickFn,
	        captureFn = _ref.captureFn,
	        _ref$debug = _ref.debug,
	        debug = _ref$debug === undefined ? false : _ref$debug,
	        _ref$containerClassna = _ref.containerClassname,
	        containerClassname = _ref$containerClassna === undefined ? 'diffy--debug-view' : _ref$containerClassna,
	        _ref$resolution = _ref.resolution,
	        x = _ref$resolution.x,
	        y = _ref$resolution.y;
	
	    _classCallCheck(this, Diffy);
	
	    this.tickFn = tickFn;
	    this.captureFn = captureFn;
	
	    this.currentImageData = null;
	    this.previousImageData = null;
	
	    this.resolutionX = x;
	    this.resolutionY = y;
	
	    this.debug = debug;
	    this.containerClassname = containerClassname;
	
	    this.constraints = {
	      audio: false,
	      video: {
	        width: 260,
	        height: 200
	      }
	    };
	
	    console.log('tickFn: ', this.tickFn);
	    console.log('captureFn: ', this.captureFn);
	    console.log('debug: ', this.debug);
	    console.log('className: ', this.containerClassname);
	    console.log('resolution: ', this.resolutionX, this.resolutionY);
	  }
	
	  _createClass(Diffy, [{
	    key: 'toVideo',
	    value: function toVideo() {}
	  }, {
	    key: 'toCanvas',
	    value: function toCanvas() {}
	  }, {
	    key: 'tick',
	    value: function tick() {
	      requestAnimFrame(this.tick);
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	      function doInit() {
	        console.log('DOM ready. Init...');
	      }
	
	      window.addEventListener('load', doInit);
	    }
	  }, {
	    key: 'createElements',
	    value: function createElements() {
	      var container = document.createElement('div');
	      container.className = className;
	
	      var video = document.createElement('video');
	      video.className = 'debug--video';
	
	      var rawCanvas = document.createElement('canvas');
	      rawCanvas.className = 'debug--raw-canvas';
	
	      var blendCanvas = document.createElement('div');
	      blendCanvas.className = 'debug--blend-canvas';
	
	      var header = document.createElement('div');
	      header.className = 'debug--header';
	
	      var title = document.createElement('h6');
	      title.className = 'debug--title';
	      title.innerText = 'diffy debug view';
	
	      var toggle = document.createElement('span');
	      toggle.innerText = '-';
	      header.appendChild(toggle);
	      header.appendChild(title);
	
	      container.appendChild(header);
	      container.appendChild(video);
	      container.appendChild(rawCanvas);
	      container.appendChild(blendCanvas);
	    }
	  }, {
	    key: 'createDebugView',
	    value: function createDebugView() {
	      var container = document.createElement('div');
	      container.className = className;
	
	      var video = document.createElement('video');
	      video.className = 'debug--video';
	
	      var rawCanvas = document.createElement('canvas');
	      rawCanvas.className = 'debug--raw-canvas';
	
	      var blendCanvas = document.createElement('div');
	      blendCanvas.className = 'debug--blend-canvas';
	
	      var header = document.createElement('div');
	      header.className = 'debug--header';
	
	      var title = document.createElement('h6');
	      title.className = 'debug--title';
	      title.innerText = 'diffy debug view';
	
	      var toggle = document.createElement('span');
	      toggle.innerText = '-';
	      header.appendChild(toggle);
	      header.appendChild(title);
	
	      container.appendChild(header);
	      container.appendChild(video);
	      container.appendChild(rawCanvas);
	      container.appendChild(blendCanvas);
	
	      document.body.appendChild(container);
	    }
	  }], [{
	    key: 'create',
	    value: function create(options) {
	      if (Diffy.instanceExists) {
	        throw new Error('It seems a diffy instance\n      already exists on this page.');
	      }
	
	      return new this(options);
	      Diffy.instanceExists = true;
	    }
	  }, {
	    key: 'VERSION',
	    get: function get() {
	      return '1.0.0';
	    }
	  }, {
	    key: 'instanceExists',
	    get: function get() {
	      return false;
	    },
	    set: function set(bool) {
	      Diffy.instanceExists = bool;
	    }
	  }]);
	
	  return Diffy;
	}();
	
	exports.default = Diffy;

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*
	  shim requestAnimationFrame api
	  source: http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
	*/
	var requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
	  window.setTimeout(callback, 1000 / 60);
	};
	
	exports.default = requestAnimFrame;

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/* eslint-disable no-unused-vars */
	/* eslint-disable no-console */
	/*
	  shim getUserMedia with a Promise api
	  source: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
	*/
	var getUserMedia = function getUserMedia(constraints, successCallback, errorCallback) {
	
	  // First get a hold of getUserMedia, if present
	  var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
	
	  // Some browsers just don't implement it - return a rejected promise with an error
	  // to keep a consistent interface
	  if (!getUserMedia) {
	    return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
	  }
	
	  // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise
	  return new Promise(function (successCallback, errorCallback) {
	    getUserMedia.call(navigator, constraints, successCallback, errorCallback);
	  });
	};
	
	// Older browsers might not implement mediaDevices at all, so we set an empty object first
	if (navigator.mediaDevices === undefined) {
	  navigator.mediaDevices = {};
	}
	
	// Some browsers partially implement mediaDevices. We can't just assign an object
	// with getUserMedia as it would overwrite existing properties.
	// Here, we will just add the getUserMedia property if it's missing.
	if (navigator.mediaDevices.getUserMedia === undefined) {
	  navigator.mediaDevices.getUserMedia = getUserMedia;
	}
	
	/*
	  capture from camera
	  returns objectUrl
	 */
	var capture = function capture(constraints) {
	  return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
	    return window.URL.createObjectURL(stream);
	  }).catch(function (_ref) {
	    var name = _ref.name,
	        message = _ref.message;
	    return console.error(name + ' : ' + message);
	  });
	};
	
	exports.default = capture;

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/* eslint-disable no-console */
	
	/*
	  utility function to log only once
	  useful for logging in loops
	*/
	var createOnceLog = exports.createOnceLog = function createOnceLog() {
	  var counter = 0;
	  return function onceLog() {
	    if (counter < 1) {
	      var _console;
	
	      (_console = console).log.apply(_console, arguments);
	    }
	    counter++;
	  };
	};
	
	/*
	  utility function for getting DOM references
	  return DOM Object
	*/
	var $ = exports.$ = function $(selector) {
	  return document.querySelector(selector);
	};
	
	/*
	  bitwise Math.round
	  returns number
	*/
	var round = exports.round = function round(number) {
	  return number + .5 >> 0;
	};

/***/ }
/******/ ])
});
;
//# sourceMappingURL=diffy.min.js.map